---
description: Java 17, Spring Boot 3.5.0 기반 의존성 버전 관리, Gradle 설정, 안정화된 라이브러리 버전 가이드를 제공합니다.
globs: 
alwaysApply: false
---
# 📦 의존성 및 버전 관리 규칙

## 🔒 고정 버전 (절대 변경 금지)
- **Java**: `17` (LTS)
- **Spring Boot**: `3.5.0`
- **Spring Dependency Management**: `1.1.7`

## 📋 **현재 프로젝트 상태** (2024년 6월 기준)
```gradle
// 현재 build.gradle 상태 (common 모듈 완성 기준)
plugins {
    id 'java'
    id 'org.springframework.boot' version '3.5.0'
    id 'io.spring.dependency-management' version '1.1.7'
}

dependencies {
    // ✅ 추가 완료된 의존성들
    implementation 'org.springframework.boot:spring-boot-starter'
    implementation 'org.springframework.boot:spring-boot-starter-web'           // REST API
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'     // JPA
    implementation 'org.springframework.boot:spring-boot-starter-validation'   // Bean Validation
    implementation 'org.springframework.boot:spring-boot-starter-security'     // Spring Security
    
    // JSON 처리 향상
    implementation 'com.fasterxml.jackson.core:jackson-databind'
    implementation 'com.fasterxml.jackson.datatype:jackson-datatype-jsr310'
    
    // Lombok (생산성)
    compileOnly 'org.projectlombok:lombok'
    annotationProcessor 'org.projectlombok:lombok'
    
    // Database (개발용)
    runtimeOnly 'com.h2database:h2'
    
    // Test
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testRuntimeOnly 'org.junit.platform:junit-platform-launcher'
}
```

## 🎉 **완성된 모듈**
- ✅ **common/exception**: ErrorCode(4xxx, 5xxx), BusinessException, GlobalExceptionHandler + 4개 구체 예외
- ✅ **common/response**: ApiResponse, SuccessCode(2xxx), PageResponse
- ✅ **빌드 성공**: 모든 클래스 정상 컴파일

## 🎯 **단계별 의존성 추가 가이드**

### 1️⃣ **즉시 추가 필요** (인프라 기본)
```gradle
dependencies {
    // 기존 의존성
    implementation 'org.springframework.boot:spring-boot-starter'
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testRuntimeOnly 'org.junit.platform:junit-platform-launcher'
    
    // 🔥 즉시 추가
    implementation 'org.springframework.boot:spring-boot-starter-web'        // REST API
    implementation 'org.springframework.boot:spring-boot-starter-validation' // 입력 검증
    implementation 'org.projectlombok:lombok'                              // 코드 간소화
    annotationProcessor 'org.projectlombok:lombok'
    
    // JSON 처리 향상
    implementation 'com.fasterxml.jackson.datatype:jackson-datatype-jsr310'
}
```

### 2️⃣ **User/Auth 도메인 구현 시** (데이터베이스 + 보안)
```gradle
dependencies {
    // Database & JPA
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    runtimeOnly 'com.h2database:h2'                    // 로컬 개발용
    runtimeOnly 'com.mysql:mysql-connector-j'          // 운영 환경용
    
    // Redis (세션/캐시)
    implementation 'org.springframework.boot:spring-boot-starter-data-redis'
    
    // Security & JWT
    implementation 'org.springframework.boot:spring-boot-starter-security'
    implementation 'io.jsonwebtoken:jjwt-api:0.12.6'
    implementation 'io.jsonwebtoken:jjwt-impl:0.12.6'
    implementation 'io.jsonwebtoken:jjwt-jackson:0.12.6'
    
    // 테스트 지원
    testImplementation 'org.springframework.security:spring-security-test'
}
```

### 3️⃣ **문서화 + 고급 기능** (API 문서 + QueryDSL)
```gradle
dependencies {
    // API 문서화
    implementation 'org.springdoc:springdoc-openapi-starter-webmvc-ui:2.6.0'
    
    // QueryDSL (복잡한 쿼리용)
    implementation 'com.querydsl:querydsl-jpa:5.1.0:jakarta'
    annotationProcessor 'com.querydsl:querydsl-apt:5.1.0:jakarta'
    
    // 테스트 개선
    testImplementation 'org.testcontainers:junit-jupiter:1.20.4'
    testImplementation 'org.testcontainers:mysql:1.20.4'
}
```

### 4️⃣ **운영 환경 준비** (AWS + 모니터링)
```gradle
dependencies {
    // AWS SDK v2 (Lambda 호출용)
    implementation platform('software.amazon.awssdk:bom:2.25.62')
    implementation 'software.amazon.awssdk:lambda'

    // AWS Spring Cloud (S3, SQS 등)
    implementation platform('io.awspring.cloud:spring-cloud-aws-dependencies:3.2.1')
    implementation 'io.awspring.cloud:spring-cloud-aws-starter-s3'
    implementation 'io.awspring.cloud:spring-cloud-aws-starter-sqs'

    // 운영 모니터링
    implementation 'org.springframework.boot:spring-boot-starter-actuator'
    implementation 'io.micrometer:micrometer-registry-prometheus'
}
```

## 📚 **완성된 build.gradle 템플릿**

### 플러그인 섹션
```gradle
plugins {
    id 'java'
    id 'org.springframework.boot' version '3.5.0'
    id 'io.spring.dependency-management' version '1.1.7'
    id 'org.asciidoctor.jvm.convert' version '4.0.3'  // 문서 생성 (선택)
}

group = 'com.sbpb.ddobak'
version = '0.0.1-SNAPSHOT'

java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(17)
    }
}

repositories {
    mavenCentral()
}
```

### 의존성 섹션 (전체)
```gradle
dependencies {
    // 📌 Core Spring Boot
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'org.springframework.boot:spring-boot-starter-validation'
    implementation 'org.springframework.boot:spring-boot-starter-actuator'
    
    // 📌 Database & JPA
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    implementation 'org.springframework.boot:spring-boot-starter-data-redis'
    runtimeOnly 'com.h2database:h2'                    // 개발용
    runtimeOnly 'com.mysql:mysql-connector-j'          // 운영용
    
    // 📌 Security & JWT
    implementation 'org.springframework.boot:spring-boot-starter-security'
    implementation 'io.jsonwebtoken:jjwt-api:0.12.6'
    implementation 'io.jsonwebtoken:jjwt-impl:0.12.6'
    implementation 'io.jsonwebtoken:jjwt-jackson:0.12.6'
    
    // 📌 Documentation
    implementation 'org.springdoc:springdoc-openapi-starter-webmvc-ui:2.6.0'
    
    // 📌 AWS SDK v2 (Lambda)
    implementation platform('software.amazon.awssdk:bom:2.25.62')
    implementation 'software.amazon.awssdk:lambda'

    // 📌 AWS Services (프로덕션용)
    implementation platform('io.awspring.cloud:spring-cloud-aws-dependencies:3.2.1')
    implementation 'io.awspring.cloud:spring-cloud-aws-starter-s3'
    implementation 'io.awspring.cloud:spring-cloud-aws-starter-sqs'
    
    // 📌 Utils & Tools
    implementation 'org.projectlombok:lombok'
    annotationProcessor 'org.projectlombok:lombok'
    implementation 'com.fasterxml.jackson.datatype:jackson-datatype-jsr310'
    
    // 📌 QueryDSL (복잡한 쿼리용)
    implementation 'com.querydsl:querydsl-jpa:5.1.0:jakarta'
    annotationProcessor 'com.querydsl:querydsl-apt:5.1.0:jakarta'
    
    // 📌 Monitoring (운영용)
    implementation 'io.micrometer:micrometer-registry-prometheus'
    
    // 📌 Test Dependencies
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testImplementation 'org.springframework.security:spring-security-test'
    testImplementation 'org.testcontainers:junit-jupiter:1.20.4'
    testImplementation 'org.testcontainers:mysql:1.20.4'
    testRuntimeOnly 'org.junit.platform:junit-platform-launcher'
}
```

### 테스트 설정
```gradle
tasks.named('test') {
    useJUnitPlatform()
    systemProperty 'spring.profiles.active', 'test'
    
    // 테스트 리포트 설정
    reports {
        html.required = true
        junitXml.required = true
    }
    
    // 병렬 테스트 실행
    maxParallelForks = Runtime.runtime.availableProcessors().intdiv(2) ?: 1
}
```

## 📋 의존성 관리 원칙

### 1. **현재 상태 기준 우선순위**
```
🔥 즉시 필요: Web, Validation, Lombok
⚡ 단기 필요: JPA, Security, JWT
📈 중기 필요: QueryDSL, Swagger
🚀 장기 필요: AWS, Monitoring
```

### 2. **버전 관리 전략**
- **Spring Boot BOM**: 버전 충돌 방지
- **Platform BOM**: AWS, TestContainers 등 외부 플랫폼
- **명시적 버전**: 보안 취약점이 있는 패키지만

### 3. **의존성 분류**
- **Core**: Spring Boot, Security, Data JPA
- **Infrastructure**: Database, Redis, AWS
- **Utils**: Lombok, Jackson, Validation
- **Development**: QueryDSL, Documentation
- **Test**: Spring Test, TestContainers

### 4. **추가 규칙**
- 동일 기능의 라이브러리 중복 금지
- 사용하지 않는 의존성 제거
- 보안 업데이트 정기 확인
- 라이센스 호환성 검증

## 🔧 **다음 단계 실행 계획**

### 즉시 실행 가능한 명령어
```bash
# 1. 현재 skeleton에 기본 의존성 추가
./gradlew clean build

# 2. 의존성 추가 후 프로젝트 새로고침
./gradlew --refresh-dependencies

# 3. 테스트 실행으로 설정 확인
./gradlew test
```

## 🚫 금지 사항
- **Spring Boot 버전 다운그레이드 절대 금지**
- **Java 17 미만 버전 사용 금지**
- **SNAPSHOT 버전 운영 환경 사용 금지**
- **의존성 exclude 남발 금지** (충돌 해결 우선)
- **skeleton 단계에서 불필요한 의존성 추가 금지**
