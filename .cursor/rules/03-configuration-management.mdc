---
description: application.yml 환경별 설정 분리, .env 민감정보 관리, Spring Profile 기반 설정 관리 가이드를 제공합니다.
globs: 
alwaysApply: false
---
# ⚙️ 설정 관리 및 환경별 분리 규칙

## 🔧 **현재 상황 및 즉시 수행 작업** (skeleton 기준)

### 📋 현재 설정 파일 상태
```
현재: src/main/resources/application.properties (빈 파일)
목표: src/main/resources/application.yml (YAML 형식)
```

### 🚀 즉시 실행할 변환 작업
```bash
# 1. 기존 application.properties 제거
rm src/main/resources/application.properties

# 2. application.yml 생성 (아래 템플릿 사용)
```

## 📋 설정 파일 구조

### 기본 설정 파일 위치
```
src/main/resources/
├── application.yml                 # 기본 공통 설정 ✅ 즉시 생성 필요
├── application-local.yml          # 로컬 개발 환경
├── application-dev.yml            # 개발 서버 환경  
├── application-staging.yml        # 스테이징 환경
├── application-prod.yml           # 운영 환경
├── application-test.yml           # 테스트 환경
└── .env                          # 민감 정보 (gitignore 필수)
```

## 🔧 **즉시 적용 가능한 application.yml 템플릿**

### 📌 1단계: 기본 공통 설정 (application.yml)
```yaml
spring:
  application:
    name: ddobak-server
  
  profiles:
    active: ${SPRING_PROFILES_ACTIVE:local}
  
  jackson:
    default-property-inclusion: non_null
    time-zone: Asia/Seoul
    serialization:
      write-dates-as-timestamps: false

server:
  port: 8080
  servlet:
    encoding:
      charset: UTF-8
      enabled: true
      force: true

management:
  endpoints:
    web:
      exposure:
        include: health,info
  endpoint:
    health:
      show-details: when_authorized

logging:
  level:
    com.sbpb.ddobak: debug
  pattern:
    console: "%d{yyyy-MM-dd HH:mm:ss} [%thread] %-5level %logger{36} - %msg%n"

aws:
  region: ap-northeast-2
  lambda:
    function-name: your-lambda-function
```

### 📌 2단계: 로컬 개발 환경 (application-local.yml)
```yaml
spring:
  h2:
    console:
      enabled: true
      path: /h2-console
      settings:
        web-allow-others: true

server:
  port: 8080

logging:
  level:
    root: info
    com.sbpb.ddobak: debug
    org.springframework.web: debug
```

### 📌 3단계: 테스트 환경 (application-test.yml)
```yaml
spring:
  datasource:
    url: jdbc:h2:mem:testdb;DB_CLOSE_DELAY=-1;DB_CLOSE_ON_EXIT=FALSE
    driver-class-name: org.h2.Driver
    username: sa
    password: 

  jpa:
    hibernate:
      ddl-auto: create-drop
    show-sql: true
    properties:
      hibernate:
        format_sql: true

logging:
  level:
    root: warn
    com.sbpb.ddobak: debug
    org.hibernate.SQL: debug
```

## 🔧 **도메인 구현 시 추가할 설정들**

### 🗄️ JPA/Database 설정 추가 시
```yaml
spring:
  datasource:
    url: jdbc:h2:mem:ddobak;DB_CLOSE_DELAY=-1;DB_CLOSE_ON_EXIT=FALSE
    driver-class-name: org.h2.Driver
    username: sa
    password: 
    hikari:
      maximum-pool-size: 10
      minimum-idle: 5
  
  jpa:
    open-in-view: false
    hibernate:
      ddl-auto: create-drop  # 로컬: create-drop, 운영: validate
    properties:
      hibernate:
        dialect: org.hibernate.dialect.H2Dialect
        format_sql: true
        use_sql_comments: true
        jdbc:
          batch_size: 1000
          order_inserts: true
          order_updates: true
    show-sql: true
```

### 🔐 Security/JWT 설정 추가 시
```yaml
app:
  jwt:
    secret: ${JWT_SECRET:ddobak-default-secret-key-change-in-production}
    expiration: ${JWT_EXPIRATION:86400000}  # 24시간
    refresh-expiration: ${JWT_REFRESH_EXPIRATION:604800000}  # 7일
  
  oauth:
    google:
      client-id: ${GOOGLE_CLIENT_ID:}
      client-secret: ${GOOGLE_CLIENT_SECRET:}
      redirect-uri: ${GOOGLE_REDIRECT_URI:http://localhost:8080/auth/oauth/google/callback}
```

### 📊 Redis 설정 추가 시
```yaml
spring:
  data:
    redis:
      host: ${REDIS_HOST:localhost}
      port: ${REDIS_PORT:6379}
      password: ${REDIS_PASSWORD:}
      timeout: 2000ms
      lettuce:
        pool:
          max-active: 8
          max-idle: 8
          min-idle: 0
```

### 📚 Swagger/OpenAPI 설정 추가 시
```yaml
springdoc:
  api-docs:
    path: /api-docs
  swagger-ui:
    path: /swagger-ui.html
    enabled: true
    operations-sorter: method
    tags-sorter: alpha
  show-actuator: false
  
app:
  api:
    title: DDOBAK Server API
    description: DDOBAK 프로젝트 REST API 문서
    version: 1.0.0
    contact:
      name: DDOBAK Team
      email: team@ddobak.com
```

## 🌍 환경별 설정 상세 가이드

### 개발 서버 환경 (application-dev.yml)
```yaml
spring:
  datasource:
    url: ${DB_URL:jdbc:mysql://localhost:3306/ddobak_dev}
    username: ${DB_USERNAME:ddobak_dev}
    password: ${DB_PASSWORD:}
    hikari:
      maximum-pool-size: 15
      minimum-idle: 5
  
  jpa:
    hibernate:
      ddl-auto: update
    show-sql: false

logging:
  level:
    root: info
    com.sbpb.ddobak: debug
  file:
    name: /logs/ddobak-dev.log
```

### 운영 환경 (application-prod.yml)
```yaml
spring:
  datasource:
    url: ${DB_URL}
    username: ${DB_USERNAME}
    password: ${DB_PASSWORD}
    hikari:
      maximum-pool-size: 20
      minimum-idle: 5
      idle-timeout: 300000
      max-lifetime: 1200000
      connection-timeout: 20000
  
  jpa:
    hibernate:
      ddl-auto: validate
    show-sql: false

server:
  port: ${SERVER_PORT:8080}

logging:
  level:
    root: warn
    com.sbpb.ddobak: info
  file:
    name: /logs/ddobak-server.log

management:
  endpoints:
    web:
      exposure:
        include: health,info,metrics,prometheus
```

## 🔐 환경 변수 및 민감 정보 관리

### .env 파일 템플릿 (로컬 개발용)
```env
# Spring Profile
SPRING_PROFILES_ACTIVE=local

# Database (로컬 H2 사용 시 불필요)
# DB_URL=jdbc:mysql://localhost:3306/ddobak_local
# DB_USERNAME=ddobak_user
# DB_PASSWORD=your_local_password

# Redis (로컬 Redis 사용 시)
# REDIS_HOST=localhost
# REDIS_PORT=6379
# REDIS_PASSWORD=

# JWT
JWT_SECRET=ddobak-local-secret-key-minimum-256-bits-for-security
JWT_EXPIRATION=86400000
JWT_REFRESH_EXPIRATION=604800000

# OAuth (개발 시 실제 값 입력)
GOOGLE_CLIENT_ID=your_google_client_id
GOOGLE_CLIENT_SECRET=your_google_client_secret

# AWS (로컬 개발에서는 주석 처리)
# AWS_ACCESS_KEY_ID=your_access_key
# AWS_SECRET_ACCESS_KEY=your_secret_key
# AWS_REGION=ap-northeast-2
# AWS_S3_BUCKET=ddobak-local-bucket
# AWS_LAMBDA_FUNCTION=your-lambda-function

# External APIs
EXTERNAL_API_BASE_URL=https://api.external-service.com
EXTERNAL_API_KEY=your_external_api_key
```

## 📝 설정 클래스 작성 가이드

### Properties 클래스 예시 (JWT 설정)
```java
@ConfigurationProperties(prefix = "app.jwt")
@ConstructorBinding
@Getter
@ToString
public class JwtProperties {
    private final String secret;
    private final Long expiration;
    private final Long refreshExpiration;
    
    public JwtProperties(String secret, Long expiration, Long refreshExpiration) {
        this.secret = secret;
        this.expiration = expiration != null ? expiration : 86400000L;
        this.refreshExpiration = refreshExpiration != null ? refreshExpiration : 604800000L;
    }
}
```

### Config 클래스 예시
```java
@Configuration
@EnableConfigurationProperties({JwtProperties.class})
@Slf4j
public class AppConfig {
    
    private final JwtProperties jwtProperties;
    
    public AppConfig(JwtProperties jwtProperties) {
        this.jwtProperties = jwtProperties;
    }
    
    @Bean
    public JwtUtils jwtUtils() {
        log.info("Initializing JwtUtils with expiration: {}ms", jwtProperties.getExpiration());
        return new JwtUtils(jwtProperties);
    }
}
```

## 🏷️ 프로파일 관리 전략

### 1. 프로파일 활성화 우선순위
1. 명령행 인수: `--spring.profiles.active=prod`
2. 환경 변수: `SPRING_PROFILES_ACTIVE=prod`
3. application.yml: `spring.profiles.active: local`

### 2. **현재 skeleton 기준 프로파일 설정**
```yaml
# 기본 프로파일 (로컬 개발)
spring:
  profiles:
    active: local
```

### 3. 프로파일별 용도
- **local**: 개발자 로컬 환경 (H2 데이터베이스)
- **test**: 단위/통합 테스트 (In-memory H2)
- **dev**: 개발 서버 (MySQL, 로깅 증가)
- **staging**: 스테이징 서버 (운영 환경과 동일 설정)
- **prod**: 운영 환경 (최적화된 설정)

## 🚀 **즉시 실행 가능한 설정 작업**

### 1단계: 기본 설정 파일 생성
```bash
# application.properties 제거 및 application.yml 생성
rm src/main/resources/application.properties
# 위의 "1단계 기본 공통 설정" 내용으로 application.yml 생성
```

### 2단계: 로컬 환경 설정
```bash
# application-local.yml 생성 (위의 템플릿 사용)
# .env 파일 생성 (로컬 개발용 환경변수)
echo ".env" >> .gitignore  # .env 파일 Git 제외
```

### 3단계: 테스트 환경 설정
```bash
# application-test.yml 생성 (테스트용 H2 설정)
```

## 🚫 설정 관리 금지 사항

### 절대 금지
- **민감 정보를 application.yml에 하드코딩**
- **운영 환경 설정을 Git에 커밋**
- **default 프로파일에 환경별 설정 포함**
- **.env 파일을 Git에 추가**
- **application.properties와 application.yml 혼용**

### 권장하지 않음
- 과도한 설정 분산 (가독성 저하)
- 프로파일 없는 설정 (명시적 프로파일 지정 필수)
- 하드코딩된 URL 및 포트 번호

## 📚 참고: application.properties 대신 YAML 사용 이유
- **계층적 구조**: 가독성 향상
- **타입 안전성**: 문자열, 숫자, 불린 등 자동 변환
- **주석 지원**: 설정 의미 명확화
- **배열/리스트**: 복잡한 데이터 구조 표현
- **중복 제거**: 공통 prefix 그룹화 가능
